/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lk.ijse.doctor.view.util;

import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import lk.ijse.doctor.controller.ControllerFactory;
import lk.ijse.doctor.controller.custom.AppoinmentController;
import lk.ijse.doctor.controller.custom.DoctorController;
import lk.ijse.doctor.controller.custom.PatientController;
import lk.ijse.doctor.controller.custom.PaymentControler;
import lk.ijse.doctor.controller.custom.ScheduleController;
import lk.ijse.doctor.dto.AppoinmentDTO;
import lk.ijse.doctor.dto.CurentIdDTO;
import lk.ijse.doctor.dto.DoctorDTO;
import lk.ijse.doctor.dto.PatientDTO;
import lk.ijse.doctor.dto.PaymentDTO;
import lk.ijse.doctor.dto.ScheduleDTO;
import lk.ijse.doctor.idgenerator.IdGenerator;
import lk.ijse.doctor.reports.view.PrintReports;
import lk.ijse.doctor.view.MainDoctor;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;

/**
 *
 * @author sameera
 */
public class MakaAppointmentForm extends javax.swing.JPanel {

    private DoctorController ctrlDoctor;
    private AppoinmentController ctrlAppointment;
    private PaymentControler ctrlPayment;
    private ScheduleController ctrlSchedule;
    private PatientController ctrlPatient;
    private String doctorName = "";
    private String patientName = "";
    private String dcid = "";
    private String app = "";

    /**
     * Creates new form MakaAppointmentForm
     */
    public MakaAppointmentForm() {
        initComponents();
        ctrlDoctor = (DoctorController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.DOCTOR);
        ctrlAppointment = (AppoinmentController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.APPOINMENT);
        ctrlPayment = (PaymentControler) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.PAYMENT);
        ctrlSchedule = (ScheduleController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.SCHEDULE);
        ctrlPatient = (PatientController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.PATIENT);
        loadDoctorNames();
        //loadPCount();

        setApNo1();
        loadPatientName();
        setEnable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void count() {

        double x = Double.parseDouble(txtDoctroFreePrint.getText());
        double y = Double.parseDouble(txtHospitalFreePrint.getText());

        double tot = x + y;
        txtTotalAmountPrint.setText(tot + "");
    }

    private void clearFiledPayment() {
        txtpatIdPrint.setText("");
        txtDoctorNamePrint.setText("");
        txtAppointmentIdPrint.setText("");
        txtDoctroFreePrint.setText("");
        txtHospitalFreePrint.setText("");
        txtTotalAmountPrint.setText("");
        txtDatePrint.setText("");
    }

    private void clearFiled() {
        txtAppointmentId.setText("");
        cmbLoadDoctorNames.setSelectedItem("");
        cmbPatientNames.setSelectedItem("");
        txtAppointmentNo.setText("");
        txtAppointmentTime.setText("");

    }

    private void setEnable(boolean enable, JComponent... cmp) {
        txtAppointmentId.setEnabled(enable);
        cmbLoadDoctorNames.setEnabled(enable);
        cmbPatientNames.setEnabled(enable);
        txtAppointmentNo.setEnabled(enable);
        txtAppointmentTime.setEnabled(enable);
        cldDate.setEnabled(enable);
        btnAddAppointment.setEnabled(enable);
        for (JComponent jcmp : cmp) {
            jcmp.setEnabled(!enable);
        }
    }

    private void doValidata() {
        String apid = txtAppointmentId.getText();
        String dname = (String) cmbLoadDoctorNames.getSelectedItem();
        String ptid = (String) cmbPatientNames.getSelectedItem();
        String apno = txtAppointmentNo.getText();
        String time = txtAppointmentTime.getText();

        btnAddAppointment.setEnabled(false);

        if (!apid.isEmpty()) {
            if (!dname.isEmpty()) {
                if (!ptid.isEmpty()) {
                    if (!apno.isEmpty()) {
                        if (!time.isEmpty()) {
                            btnAddAppointment.setEnabled(true);
                        }
                    }

                }
            }
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMake = new javax.swing.JPanel();
        pnl = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        txtAppointmentId = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtAppointmentNo = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtAppointmentTime = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cmbLoadDoctorNames = new javax.swing.JComboBox();
        btnNewAppointment = new javax.swing.JButton();
        btnAddAppointment = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        cldDate = new org.freixas.jcalendar.JCalendarCombo();
        cmbPatientNames = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        txtDoctroFreePrint = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtpatIdPrint = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtHospitalFreePrint = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtTotalAmountPrint = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtDatePrint = new javax.swing.JTextField();
        btnSaveAndPrint = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        txtDoctorNamePrint = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtAppointmentIdPrint = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlMake.setLayout(new javax.swing.BoxLayout(pnlMake, javax.swing.BoxLayout.LINE_AXIS));

        pnl.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Payment");
        pnl.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 20, 110, 30));

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtAppointmentId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAppointmentIdKeyReleased(evt);
            }
        });
        jPanel3.add(txtAppointmentId, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 90, 321, 30));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Doctor Name :");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 115, 30));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Appointment Id :");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 115, 30));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("Patient Id :");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 115, 30));

        txtAppointmentNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAppointmentNoKeyReleased(evt);
            }
        });
        jPanel3.add(txtAppointmentNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 240, 321, 30));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setText("Appointment No :");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 115, 30));

        txtAppointmentTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAppointmentTimeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAppointmentTimeKeyReleased(evt);
            }
        });
        jPanel3.add(txtAppointmentTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 300, 321, 30));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setText("Appointment Time :");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 130, 30));

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel9.setText("Appointment Date :");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 130, 30));

        cmbLoadDoctorNames.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cmbLoadDoctorNames.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbLoadDoctorNamesItemStateChanged(evt);
            }
        });
        cmbLoadDoctorNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLoadDoctorNamesActionPerformed(evt);
            }
        });
        cmbLoadDoctorNames.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cmbLoadDoctorNamesKeyReleased(evt);
            }
        });
        jPanel3.add(cmbLoadDoctorNames, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 320, 30));

        btnNewAppointment.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnNewAppointment.setText("New Appointment");
        btnNewAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewAppointmentActionPerformed(evt);
            }
        });
        jPanel3.add(btnNewAppointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, 160, 40));

        btnAddAppointment.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAddAppointment.setText("Add Appointment");
        btnAddAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAppointmentActionPerformed(evt);
            }
        });
        jPanel3.add(btnAddAppointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 450, 160, 40));

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton4.setText("Back");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 450, 110, 40));

        cldDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cldDateMousePressed(evt);
            }
        });
        cldDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cldDateActionPerformed(evt);
            }
        });
        cldDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cldDateKeyPressed(evt);
            }
        });
        jPanel3.add(cldDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 360, 320, 30));

        cmbPatientNames.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cmbPatientNames.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPatientNamesItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbPatientNames, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 190, 320, 30));

        pnl.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 520, 550));

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel11.setText("Doctor Free :");
        jPanel5.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 115, 30));

        txtDoctroFreePrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctroFreePrintActionPerformed(evt);
            }
        });
        jPanel5.add(txtDoctroFreePrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 190, 321, 30));

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel12.setText("Payment Id :");
        jPanel5.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 115, 30));

        txtpatIdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpatIdPrintActionPerformed(evt);
            }
        });
        jPanel5.add(txtpatIdPrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, 321, 30));

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel13.setText("Hospital Free :");
        jPanel5.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 115, 30));

        txtHospitalFreePrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHospitalFreePrintActionPerformed(evt);
            }
        });
        jPanel5.add(txtHospitalFreePrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 240, 321, 30));

        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel14.setText("Total Amount :");
        jPanel5.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 115, 30));

        txtTotalAmountPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalAmountPrintActionPerformed(evt);
            }
        });
        jPanel5.add(txtTotalAmountPrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 290, 321, 30));

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel15.setText("Date :");
        jPanel5.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 115, 30));
        jPanel5.add(txtDatePrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 340, 321, 30));

        btnSaveAndPrint.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSaveAndPrint.setText("Print & Save");
        btnSaveAndPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAndPrintActionPerformed(evt);
            }
        });
        jPanel5.add(btnSaveAndPrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 410, 150, 40));

        jLabel16.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel16.setText("Doctor Name :");
        jPanel5.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 115, 30));
        jPanel5.add(txtDoctorNamePrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 321, 30));

        jLabel17.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel17.setText("Appointmnet Id :");
        jPanel5.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 115, 30));
        jPanel5.add(txtAppointmentIdPrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 130, 320, 30));

        pnl.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 60, 550, 550));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setText("Make Appointment");
        pnl.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 210, 30));

        pnlMake.add(pnl);

        add(pnlMake, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1140, 660));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        AddPatients addPatients = new AddPatients();
        pnlMake.removeAll();
        pnlMake.repaint();
        pnlMake.revalidate();
        pnlMake.add(addPatients);
        addPatients.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void cmbLoadDoctorNamesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbLoadDoctorNamesItemStateChanged
        String dcname = cmbLoadDoctorNames.getSelectedItem().toString();

        try {
            DoctorDTO doctor = ctrlDoctor.searchName(dcname);
            doctorName = doctor.getDcid();
            dcid = doctor.getDcid();
            setApNo1();
//loadPCount();
        } catch (Exception ex) {
            Logger.getLogger(MakaAppointmentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbLoadDoctorNamesItemStateChanged

    private void btnNewAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewAppointmentActionPerformed
        clearFiled();
        setApNo1();
        setEnable(true, btnAddAppointment);
        txtAppointmentId.requestFocusInWindow();

        try {
            String apid = IdGenerator.getNewRegistrationIds("appoinment", "apid", "AP");
            txtAppointmentId.setText(apid);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MakaAppointmentForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MakaAppointmentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNewAppointmentActionPerformed

    private void btnAddAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAppointmentActionPerformed

        try {
            String apid = txtAppointmentId.getText();
            String apno = txtAppointmentNo.getText();
            String time = txtAppointmentTime.getText();
            Date d = (Date) cldDate.getDate();
            SimpleDateFormat df = new SimpleDateFormat("YYYY-MM-dd");
            String er = df.format(d);

            setApNo();
            AppoinmentDTO a = new AppoinmentDTO(apid, doctorName, patientName, apno, time, er);

            try {
                ScheduleDTO scheduleDTO1 = ctrlSchedule.searchDoctorA(dcid);
                int countp = scheduleDTO1.getPatientcount();
                boolean result = false;
                if (countp > 1) {
                    result = ctrlAppointment.add(a);
                }

                if (result) {
                    clearFiled();
                    setEnable(false);
                    btnAddAppointment.requestFocusInWindow();
                    
                    JOptionPane.showMessageDialog(this, "Add");
                } else {
                    JOptionPane.showMessageDialog(this, "Fall...");
                }
            } catch (Exception ex) {
                Logger.getLogger(MakaAppointmentForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception ex) {
            Logger.getLogger(MakaAppointmentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddAppointmentActionPerformed

    private void cmbLoadDoctorNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLoadDoctorNamesActionPerformed
        String name = cmbLoadDoctorNames.getSelectedItem().toString();

        try {
            DoctorDTO dcotor = ctrlDoctor.searchName(name);
            txtDoctorNamePrint.setText(dcotor.getName());
            txtDoctroFreePrint.setText("" + dcotor.getDcfree());
        } catch (Exception ex) {
            Logger.getLogger(MakaAppointmentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbLoadDoctorNamesActionPerformed

    private void cldDateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cldDateKeyPressed
        //
    }//GEN-LAST:event_cldDateKeyPressed

    private void cldDateMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cldDateMousePressed
        //
    }//GEN-LAST:event_cldDateMousePressed

    private void txtAppointmentIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAppointmentIdKeyReleased
        doValidata();
    }//GEN-LAST:event_txtAppointmentIdKeyReleased

    private void cmbLoadDoctorNamesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbLoadDoctorNamesKeyReleased
        doValidata();
    }//GEN-LAST:event_cmbLoadDoctorNamesKeyReleased

    private void txtAppointmentNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAppointmentNoKeyReleased
        doValidata();
    }//GEN-LAST:event_txtAppointmentNoKeyReleased

    private void txtAppointmentTimeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAppointmentTimeKeyReleased
        doValidata();
    }//GEN-LAST:event_txtAppointmentTimeKeyReleased

    private void txtAppointmentTimeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAppointmentTimeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnAddAppointment.doClick();
        }

    }//GEN-LAST:event_txtAppointmentTimeKeyPressed

    private void btnSaveAndPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAndPrintActionPerformed

        String payid = txtpatIdPrint.getText();
        String apid = txtAppointmentIdPrint.getText();
        String amount = txtTotalAmountPrint.getText();
        double am = Double.parseDouble(amount);
        String date = txtDatePrint.getText();

        //get detail for jasper report 
        HashMap<String, Object> parameters = new HashMap<>();
        String doname = txtDoctorNamePrint.getText();
        String apno = txtAppointmentNo.getText();
        String dcfee = txtDoctroFreePrint.getText();
        String hpfee = txtHospitalFreePrint.getText();
        String patientname = (String) cmbPatientNames.getSelectedItem();
        Date d = (Date) cldDate.getDate();
        SimpleDateFormat df = new SimpleDateFormat("YYYY-MM-dd");
        String er = df.format(d);
        parameters.put("cmbPatientNames", patientname);
        parameters.put("txtDoctorNamePrint", doname);
        parameters.put("txtAppointmentNo", apno);
        parameters.put("txtDoctroFreePrint", dcfee);
        parameters.put("txtHospitalFreePrint", hpfee);
        parameters.put("txtTotalAmountPrint", amount);
        parameters.put("cldDate", d);

        //end here
        PaymentDTO payment = new PaymentDTO(payid, apid, amount, date);

        try {
            boolean isadded = ctrlPayment.add(payment);
            if (isadded) {
                clearFiledPayment();
                JOptionPane.showMessageDialog(this, "Add...");

                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(this.getClass().getResourceAsStream("/lk/ijse/doctor/reports/Payment_Reports_6.jasper"));

                JasperPrint jp = JasperFillManager.fillReport(jasperReport, parameters, new JREmptyDataSource());
                PrintReports printReports = new PrintReports(jp);
                printReports.setVisible(true);
            }
        } catch (Exception ex) {
            Logger.getLogger(MakaAppointmentForm.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnSaveAndPrintActionPerformed

    private void txtTotalAmountPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalAmountPrintActionPerformed
        //

    }//GEN-LAST:event_txtTotalAmountPrintActionPerformed

    private void txtHospitalFreePrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHospitalFreePrintActionPerformed
        txtTotalAmountPrint.requestFocus();
        count();
    }//GEN-LAST:event_txtHospitalFreePrintActionPerformed

    private void txtDoctroFreePrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctroFreePrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctroFreePrintActionPerformed

    private void cmbPatientNamesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPatientNamesItemStateChanged
        String name = cmbPatientNames.getSelectedItem().toString();

        try {
            PatientDTO patientDTO = ctrlPatient.searchName(name);
            patientName = patientDTO.getPtid();
        } catch (Exception ex) {
            Logger.getLogger(MakaAppointmentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbPatientNamesItemStateChanged

    private void txtpatIdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpatIdPrintActionPerformed
        try {
            String payid = IdGenerator.getNewPaymenyIds("payment", "payid", "PY");
            txtpatIdPrint.setText(payid);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MakaAppointmentForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MakaAppointmentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtpatIdPrintActionPerformed

    private void cldDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cldDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cldDateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAppointment;
    private javax.swing.JButton btnNewAppointment;
    private javax.swing.JButton btnSaveAndPrint;
    private org.freixas.jcalendar.JCalendarCombo cldDate;
    private javax.swing.JComboBox cmbLoadDoctorNames;
    private javax.swing.JComboBox cmbPatientNames;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel pnl;
    private javax.swing.JPanel pnlMake;
    private javax.swing.JTextField txtAppointmentId;
    private javax.swing.JTextField txtAppointmentIdPrint;
    private javax.swing.JTextField txtAppointmentNo;
    private javax.swing.JTextField txtAppointmentTime;
    private javax.swing.JTextField txtDatePrint;
    private javax.swing.JTextField txtDoctorNamePrint;
    private javax.swing.JTextField txtDoctroFreePrint;
    private javax.swing.JTextField txtHospitalFreePrint;
    private javax.swing.JTextField txtTotalAmountPrint;
    private javax.swing.JTextField txtpatIdPrint;
    // End of variables declaration//GEN-END:variables

    private void loadDoctorNames() {

        try {
            ArrayList<String> allDoctorNames = ctrlDoctor.getAllNames();
            for (String name : allDoctorNames) {
                cmbLoadDoctorNames.addItem(name);
            }
        } catch (Exception ex) {
            Logger.getLogger(MakaAppointmentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadPCount() {
        try {
            ArrayList<AppoinmentDTO> appointment = ctrlAppointment.getAll();
            ArrayList<AppoinmentDTO> al = new ArrayList<>();
            try {

                if (!appointment.isEmpty()) {
                    for (AppoinmentDTO appointment1 : appointment) {
                        if (appointment1.getDcid().equals(dcid)) {
                            al.add(appointment1);

                        } else {
                            txtAppointmentNo.setText("1");
                        }
                    }
                    if (!al.isEmpty()) {
                        int size = al.size();
                        AppoinmentDTO adto = al.get(size - 1);
                        String apNo = adto.getApno();
                        int id = Integer.parseInt(apNo);
                        int idnew = id + 1;
                        txtAppointmentNo.setText(Integer.toString(idnew));
                    }
                } else {
                    txtAppointmentNo.setText("1");
                }
            } catch (NullPointerException e) {
                txtAppointmentNo.setText("1");
            }

        } catch (Exception ex) {
            Logger.getLogger(MakaAppointmentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadPatientName() {
        try {
            ArrayList<String> getAll = ctrlPatient.patientName();
            for (String name : getAll) {
                cmbPatientNames.addItem(name);
            }
        } catch (Exception ex) {
            Logger.getLogger(MakaAppointmentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setApNo() {
        try {

            String id = txtAppointmentNo.getText();
          String scids=  SelectDoctor.scids;
            Date d = new Date();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String date = dateFormat.format(d);
            if (id.equals("1")) {

                CurentIdDTO cidto = new CurentIdDTO(dcid, scids, id, date);
                boolean isAdded = ctrlPatient.addPatientCurrent(cidto);
                System.out.println(isAdded);
            } else {
                CurentIdDTO dTO = new CurentIdDTO(dcid, scids, id, date);
                boolean isUpdated = ctrlPatient.updatePatient(dTO);
                if (isUpdated) {
                    System.out.println("dfghjvbnvbnbnvbnbn");
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(MakaAppointmentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setApNo1() {
        try {
            try {
                String name = cmbLoadDoctorNames.getSelectedItem().toString();
                DoctorDTO searchName = ctrlDoctor.searchName(name);
                String dcid1 = searchName.getDcid();
                CurentIdDTO appNo = ctrlPatient.searchAppNo(dcid1);

                int newCnt = Integer.parseInt(appNo.getCunId()) + 1;
                System.out.println("lastcnt" + appNo.getCunId());
                System.out.println("newcnt"+newCnt);
                ScheduleDTO searchDoctorA = ctrlSchedule.searchDoctorA(dcid1);
                Integer patientcount = searchDoctorA.getPatientcount();
                System.out.println("pcnt"+patientcount);
                if (newCnt <= patientcount) {
                    txtAppointmentNo.setText(Integer.toString(newCnt));
                    
                    System.out.println("asd"+Integer.toString(newCnt));
                }else{
                    JOptionPane.showMessageDialog(this, "No more Appointments..........");
                    MainDoctor.btnMainMakeApp.doClick();
                }
            } catch (NullPointerException e) {
                txtAppointmentNo.setText("1");
            }
        } catch (Exception ex) {
            Logger.getLogger(MakaAppointmentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
